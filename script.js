// --- Customizable Parameters ---
const slideshowImagesFolder = './mantras/'; // Path to your images folder
const imageDisplayDurationMs = 8000;     // How long each image stays on screen (in ms)
const imageTransitionDurationMs = 200;  // How long the fade/zoom transition takes (in ms)
const zoomAmount = .5;                  // 1.0 = no zoom, 1.1 = 10% zoom, etc.
const dialogueFadeDurationMs = 1000;     // How long dialogue fades in/out (in ms)
const dialogueDisplayDurationMs = 4000;  // How long dialogue is fully visible (in ms)
const dialogueDelayBetweenMs = 1000;     // Delay before next dialogue appears (in ms)

const manifestationDialogues = [
    "You are wonderful.",
    "You are beautiful.",
    "You are in good structure.",
    "You attract divine energy.",
    "Your presence is a blessing.",
    "Radiate your inner light.",
    "Embrace your unique essence."
];

// Set CSS custom properties from JS for animations
document.documentElement.style.setProperty('--image-display-duration', `${imageDisplayDurationMs}ms`);
document.documentElement.style.setProperty('--image-transition-duration', `${imageTransitionDurationMs}ms`);
document.documentElement.style.setProperty('--zoom-amount', zoomAmount);
document.documentElement.style.setProperty('--dialogue-fade-duration', `${dialogueFadeDurationMs}ms`);
const dialogueTotalDuration = dialogueFadeDurationMs * 2 + dialogueDisplayDurationMs;
document.documentElement.style.setProperty('--dialogue-total-duration', `${dialogueTotalDuration}ms`);



const imageFilenames = [
    'mantra1.png',
    'ChatGPT Image Jun 2, 2025, 08_54_06 PM.png',
    'ChatGPT Image Jun 2, 2025, 08_54_11 PM.png',
    'file_000000009850623082bea4ca1c9f00f5.png',
    'ChatGPT Image Jun 2, 2025, 08_54_15 PM.png',
    'file_00000000a6d861f8af8525371690bd94.png',
    'ChatGPT Image Jun 2, 2025, 09_00_32 PM.png',
    'file_00000000d99061f9bdb5878cebde2ec2.png',
    'ChatGPT Image Jun 2, 2025, 09_24_31 PM.png',
    'ChatGPT Image Jun 2, 2025, 09_28_05 PM.png',
    'ChatGPT Image Jun 2, 2025, 09_33_38 PM.png',
    'ChatGPT Image Jun 2, 2025, 09_38_42 PM.png',
    'Gemini_Generated_Image_emvb4uemvb4uemvbGemini_Generated_Image_emvb4uemvb4uemvb.png',
    'Gemini_Generated_Image_v91iyxv91iyxv91i.png',
    'file_00000000f03461f7a08f4aa3b5150279.png'
    // ... add all your image filenames here
];


let images = [];
let currentImageIndex = 0;
const currentImageEl = document.getElementById('current-image');
const nextImageEl = document.getElementById('next-image');
const manifestationTextEl = document.getElementById('manifestation-text');

async function loadImages() {
    // In a real app, this would be generated by a build script or fetched from an API
    // For this example, we'll assume imageFilenames is populated.
    const imagePromises = imageFilenames.map(filename => {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.src = `${slideshowImagesFolder}${filename}`;
            img.onload = () => resolve(img);
            img.onerror = () => {
                console.error(`Failed to load image: ${img.src}`);
                resolve(null); // Resolve with null to not block the others
            };
        });
    });
    images = (await Promise.all(imagePromises)).filter(img => img !== null);
    if (images.length === 0) {
        console.error("No images loaded. Please check 'mantras' folder and filenames.");
        manifestationTextEl.textContent = "Error: No images found. Please check your 'mantras' folder.";
        manifestationTextEl.classList.add('dialogue-active');
        return;
    }
    startSlideshow();
}

let dialogueTimer;
let slideshowTimer;
let dialogueIndex = 0;

function updateSlideshow() {
    const prevImageIndex = currentImageIndex;
    currentImageIndex = (currentImageIndex + 1) % images.length;

    // Set the 'next' image to become active
    nextImageEl.src = images[currentImageIndex].src;

    // Apply fade-out class to current image, and active class to next image
    // This sequence creates the cross-fade and continuous zoom effect.
    currentImageEl.classList.remove('active');
    currentImageEl.classList.add('fading-out'); // Ensure it continues zoom if needed, then fades

    // After a short delay, make the next image active and swap roles
    setTimeout(() => {
        currentImageEl.classList.remove('fading-out'); // Clean up old image class
        currentImageEl.src = nextImageEl.src;          // Swap image sources
        currentImageEl.classList.add('active');         // Make it the new active image

        // Prepare nextImageEl for the next transition (hidden, no zoom)
        nextImageEl.src = ''; // Clear source to prevent unintended flashes
        nextImageEl.classList.remove('active');
    }, imageTransitionDurationMs); // Match CSS transition duration

    // Schedule the next slideshow update
    slideshowTimer = setTimeout(updateSlideshow, imageDisplayDurationMs);
}

function updateManifestationDialogue() {
    manifestationTextEl.textContent = manifestationDialogues[dialogueIndex];
    manifestationTextEl.classList.remove('dialogue-active'); // Reset animation
    void manifestationTextEl.offsetWidth; // Trigger reflow to restart animation
    manifestationTextEl.classList.add('dialogue-active');

    dialogueIndex = (dialogueIndex + 1) % manifestationDialogues.length;

    dialogueTimer = setTimeout(updateManifestationDialogue, dialogueTotalDuration + dialogueDelayBetweenMs);
}

function startSlideshow() {
    // Initialize first image
    currentImageEl.src = images[currentImageIndex].src;
    currentImageEl.classList.add('active');

    // Start the slideshow and dialogue sequences
    slideshowTimer = setTimeout(updateSlideshow, imageDisplayDurationMs);
    updateManifestationDialogue(); // Start dialogue immediately
}

// Kick off the app
document.addEventListener('DOMContentLoaded', loadImages);



// At the very top or bottom of script.js, after all other logic
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('service-worker.js')
            .then(registration => {
                console.log('Service Worker registered: ', registration);
            })
            .catch(error => {
                console.log('Service Worker registration failed: ', error);
            });
    });
}
